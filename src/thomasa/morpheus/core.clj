(ns thomasa.morpheus.core
  (:require [clj-kondo.core :as clj-kondo]
            [loom.graph :as graph :refer [transpose]]
            [loom.attr :as attr]
            [loom.io :as lio]
            [loom.derived :as derived]
            [clojure.java.io :as io]
            [clojure.core.protocols :as p]
            [clojure.datafy :as datafy]
            [clojure.string :as str])
  (:import [java.io File]
           [java.net URLEncoder]))

(declare datafy-graph)

(defn filename
  "Generate filename based on `node` and `format`.

  The `/` separator between namespace and var name symbol is replaced in `node`.
  `format` gets to be a file extension."
  [node format]
  (str (str/replace node "/" "__") "." (name format)))

(defn ->nodes
  "Get `nodes` of `graph`"
  [graph]
  (:nodes (datafy/datafy graph)))

(defn ->edges
  "Get `edges` of `graph`"
  [graph]
  (:edges (datafy/datafy graph)))

(defn lint-analysis [paths]
  (:analysis
   (clj-kondo/run! {:lint paths
                    :config {:output {:analysis true}}})))

(defn- ->graph
  ([graph]
   (with-meta
     graph
     {`p/datafy datafy-graph}))
  ([nodes edges]
   (->graph (transpose (apply graph/digraph (concat nodes edges))))))

(defn- datafy-graph [g]
  (with-meta
    {:nodes (graph/nodes g)
     :edges (graph/edges g)}
    {`p/nav
     (fn [_graph _k node]
       (->graph (derived/subgraph-reachable-from g node)))
     `datafy/obj g
     `datafy/class (class g)}))

(defn var-deps-graph
  "Create a digraph based on `analysis`.

  `analysis` is of the format generated by `clj-kondo`, currently `:var-definitions` and `:var-usages` are used to derive nodes and edges for the graph."
  [analysis]
  (let [nodes (map
               (fn [{:keys [ns name]}] (str ns "/" name))
               (:var-definitions analysis))
        edges (map
               (fn [{:keys [name to from from-var]}]
                 [(str from "/" from-var) (str to "/" name)])
               (:var-usages analysis))]
    (->graph nodes edges)))

(defn node->subgraph
  "Navigate to subgraph reachable from `node`.

  `node` needs to be immediate child of the root node of `graph`"
  [graph node]
  (datafy/nav (datafy/datafy graph) nil node))

(defn path->subgraph
  "Navigate to subgraph reachable from `path`.

  `path` is applied from the root node of `graph`"
  [graph path]
  (reduce node->subgraph graph path))

(defn add-ref-to-subgraphs
  "Adds references to the `graph` in the `:URL` attribute of its nodes to subgraphs reachable from `nodes`."
  [graph nodes format]
  (reduce
   (fn [seed node]
     (if ((set (->nodes seed)) node)
       (attr/add-attr-to-nodes seed :URL (str "./" (URLEncoder/encode (filename node format))) [node])
       seed))
   graph
   nodes))

(defn graph->file!
  "Write `graph` into a file of `format` in `dir`.

  Filename is generated based on `node` and `format`, see [[filename]] for details."
  [graph dir node format]
  (io/copy
   (lio/render-to-bytes graph :fmt (keyword format))
   (File. dir (filename node format))))
